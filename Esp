local HttpService = game:GetService("HttpService")

local Settings = {
    Box_Color = Color3.fromRGB(255, 0, 0),
    Tracer_Color = Color3.fromRGB(255, 0, 0),
    Tracer_Origin = "Bottom",
    Tracer_FollowMouse = false,
    Tracers = false,
    BoxVisible = false,
    TracerVisible = false,
    HealthVisible = false,
    NameVisible = false,
}

local Team_Check = {
    TeamCheck = false,
    Green = Color3.fromRGB(0, 255, 0),
    Red = Color3.fromRGB(255, 0, 0),
}

local player = game:GetService("Players").LocalPlayer
local camera = game:GetService("Workspace").CurrentCamera
local mouse = player:GetMouse()

local function NewQuad(color)
    local quad = Drawing.new("Quad")
    quad.PointA = Vector2.new(0, 0)
    quad.PointB = Vector2.new(0, 0)
    quad.PointC = Vector2.new(0, 0)
    quad.PointD = Vector2.new(0, 0)
    quad.Color = color
    quad.Filled = false
    quad.Thickness = 1
    quad.Transparency = 1
    return quad
end

local function NewLine(color)
    local line = Drawing.new("Line")
    line.From = Vector2.new(0, 0)
    line.To = Vector2.new(0, 0)
    line.Color = color
    line.Thickness = 1
    line.Transparency = 1
    return line
end

local function NewText(color, size)
    local text = Drawing.new("Text")
    text.Text = ""
    text.Size = size
    text.Color = color
    text.Center = true
    text.Outline = true
    text.OutlineColor = Color3.fromRGB(0, 0, 0)
    text.Transparency = 1
    return text
end

local function Cleanup(library)
    for _, obj in pairs(library) do
        if obj then
            obj:Destroy()
        end
    end
end

local connections = {}

local function UpdateESP(plr)
    local library = {
        tracer = NewLine(Settings.Tracer_Color),
        box = NewQuad(Settings.Box_Color),
        healthbar = NewLine(Color3.fromRGB(0, 0, 0)),
        greenhealth = NewLine(Color3.fromRGB(0, 0, 0)),
        name = NewText(Color3.fromRGB(255, 255, 255), 14)
    }

    local connection
    connection = game:GetService("RunService").RenderStepped:Connect(function()
        if Settings.BoxVisible or Settings.TracerVisible or Settings.HealthVisible or Settings.NameVisible then
            if plr.Character and plr.Character:FindFirstChild("Humanoid") and plr.Character:FindFirstChild("HumanoidRootPart") and plr.Character.Humanoid.Health > 0 and plr.Character:FindFirstChild("Head") then
                local HumPos, OnScreen = camera:WorldToViewportPoint(plr.Character.HumanoidRootPart.Position)
                if OnScreen then
                    local head = camera:WorldToViewportPoint(plr.Character.Head.Position)
                    local DistanceY = math.clamp((Vector2.new(head.X, head.Y) - Vector2.new(HumPos.X, HumPos.Y)).magnitude, 2, math.huge)

                    local function Size(item)
                        item.PointA = Vector2.new(HumPos.X + DistanceY, HumPos.Y - DistanceY * 2)
                        item.PointB = Vector2.new(HumPos.X - DistanceY, HumPos.Y - DistanceY * 2)
                        item.PointC = Vector2.new(HumPos.X - DistanceY, HumPos.Y + DistanceY * 2)
                        item.PointD = Vector2.new(HumPos.X + DistanceY, HumPos.Y + DistanceY * 2)
                    end

                    if Settings.BoxVisible then
                        Size(library.box)
                        library.box.Visible = true
                    else
                        library.box.Visible = false
                    end

                    if Settings.TracerVisible then
                        if Settings.Tracer_Origin == "Mouse" then
                            library.tracer.From = Vector2.new(mouse.X, mouse.Y + 36)
                        elseif Settings.Tracer_Origin == "Bottom" then
                            library.tracer.From = Vector2.new(camera.ViewportSize.X * 0.5, camera.ViewportSize.Y)
                        elseif Settings.Tracer_Origin == "Top" then
                            library.tracer.From = Vector2.new(camera.ViewportSize.X * 0.5, 0)
                        end
                        library.tracer.To = Vector2.new(HumPos.X, HumPos.Y + DistanceY * 2)
                        library.tracer.Visible = true
                    else
                        library.tracer.Visible = false
                    end

                    if Settings.HealthVisible then
                        local d = (Vector2.new(HumPos.X - DistanceY, HumPos.Y - DistanceY * 2) - Vector2.new(HumPos.X - DistanceY, HumPos.Y + DistanceY * 2)).magnitude
                        local healthoffset = plr.Character.Humanoid.Health / plr.Character.Humanoid.MaxHealth * d

                        library.greenhealth.From = Vector2.new(HumPos.X - DistanceY - 4, HumPos.Y + DistanceY * 2)
                        library.greenhealth.To = Vector2.new(HumPos.X - DistanceY - 4, HumPos.Y + DistanceY * 2 - healthoffset)

                        library.healthbar.From = Vector2.new(HumPos.X - DistanceY - 4, HumPos.Y + DistanceY * 2)
                        library.healthbar.To = Vector2.new(HumPos.X - DistanceY - 4, HumPos.Y - DistanceY * 2)

                        local green = Color3.fromRGB(0, 255, 0)
                        local red = Color3.fromRGB(255, 0, 0)
                        library.greenhealth.Color = red:lerp(green, plr.Character.Humanoid.Health / plr.Character.Humanoid.MaxHealth)

                        library.greenhealth.Visible = true
                        library.healthbar.Visible = true
                    else
                        library.greenhealth.Visible = false
                        library.healthbar.Visible = false
                    end

                    if Settings.NameVisible then
                        library.name.Text = plr.Name
                        library.name.Position = Vector2.new(head.X, head.Y - 40)
                        library.name.Visible = true
                    else
                        library.name.Text = ""
                        library.name.Position = Vector2.new(head.X, head.Y - 40)
                        library.name.Visible = true
                    end

                    if Team_Check.TeamCheck then
                        if plr.TeamColor == player.TeamColor then
                            library.tracer.Color = Team_Check.Green
                            library.box.Color = Team_Check.Green
                        else
                            library.tracer.Color = Team_Check.Red
                            library.box.Color = Team_Check.Red
                        end
                    else
                        library.tracer.Color = Settings.Tracer_Color
                        library.box.Color = Settings.Box_Color
                    end

                else
                    library.box.Visible = false
                    library.tracer.Visible = false
                    library.greenhealth.Visible = false
                    library.healthbar.Visible = false
                    library.name.Visible = false
                end
            else
                library.box.Visible = false
                library.tracer.Visible = false
                library.greenhealth.Visible = false
                library.healthbar.Visible = false
                library.name.Visible = false
            end
        else
            library.box.Visible = false
            library.tracer.Visible = false
            library.greenhealth.Visible = false
            library.healthbar.Visible = false
            library.name.Visible = false
        end
    end)

    return connection, library
end

local function ManageESP(plr)
    if connections[plr] then
        if connections[plr].connection then
            connections[plr].connection:Disconnect()
        end
        Cleanup(connections[plr].library or {})
        connections[plr] = nil
    end

    if plr.Character and plr.Character:FindFirstChild("Humanoid") and plr.Character:FindFirstChild("HumanoidRootPart") then
        local connection, library = UpdateESP(plr)
        connections[plr] = { connection = connection, library = library }
    end
end

local function InitializeESP()
    for _, plr in pairs(game:GetService("Players"):GetPlayers()) do
        if plr ~= player then
            ManageESP(plr)
        end
    end
end

InitializeESP()

game.Players.PlayerAdded:Connect(function(newplr)
    if newplr ~= player then
        UpdateESP(newplr)
    end
end)

game.Players.PlayerRemoving:Connect(function(leavingPlr)
    ManageESP(leavingPlr)
end)
